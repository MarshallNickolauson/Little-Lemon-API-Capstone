User Management Endpoints:

Endpoint                    | Role                | Method | Purpose                                                  | Marked as Done
----------------------------|---------------------|--------|----------------------------------------------------------|---------------
/api/users                  | No role required    | POST   | Creates a new user with name, email, and password        | DONE
/api/users/users/me/        | Valid user token    | GET    | Displays only the current user                           | DONE
/token/login/               | Valid credentials   | POST   | Generates access tokens for other API calls              | DONE

Menu Items Endpoints:

Endpoint                   | Role                  | Method          | Purpose                                                                 | Marked as Done
---------------------------|-----------------------|-----------------|-------------------------------------------------------------------------|---------------
/api/menu-items            |Customer, delivery crew| GET             | Lists all menu items (returns 200 - Ok HTTP status code)                | DONE
/api/menu-items            |Customer, delivery crew| POST, PUT, PATCH, DELETE | Denies access and returns 403 - Unauthorized HTTP status code  | DONE
/api/menu-items/{menuItem} |Customer, delivery crew| GET             | Lists a single menu item                                                | DONE
/api/menu-items/{menuItem} |Customer, delivery crew| POST, PUT, PATCH, DELETE | Returns 403 - Unauthorized                                     | DONE
/api/menu-items            | Manager                | GET             | Lists all menu items                                                   | DONE
/api/menu-items            | Manager | GET    | Lists all menu items                                                                           | DONE
/api/menu-items            | Manager | POST   | Creates a new menu item and returns 201 - Created                                              | DONE
/api/menu-items/{menuItem} | Manager | GET    | Lists single menu item                                                                         | DONE
/api/menu-items/{menuItem} | Manager | PUT, PATCH | Updates single menu item                                                                   | DONE
/api/menu-items/{menuItem} | Manager | DELETE | Deletes menu item                                                                              | DONE

User Group Management Endpoints:

Endpoint                                 | Role   | Method | Purpose                                                                                                                                                | Marked as Done
-----------------------------------------|--------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------|---------------
/api/groups/manager/users                | Manager| GET    | Returns all managers                                                                                                                                   | DONE
/api/groups/manager/users                | Manager| POST   | Assigns the user in the payload to the manager group and returns 201-Created                                                                           | DONE
/api/groups/manager/users/{userId}       | Manager| DELETE | Removes this particular user from the manager group and returns 200 – Success if everything is okay. If the user is not found, returns 404 – Not found | DONE
/api/groups/delivery-crew/users          | Manager| GET    | Returns all delivery crew                                                                                                                              | DONE
/api/groups/delivery-crew/users          | Manager| POST   | Assigns the user in the payload to the delivery crew group and returns 201-Created HTTP                                                                | DONE
/api/groups/delivery-crew/users/{userId} | Manager| DELETE | Removes this user from the delivery crew group and returns 200 – Success if everything is okay. If the user is not found, returns 404 – Not found      | DONE

Cart Management Endpoints:

Endpoint                    | Role     | Method | Purpose                                                                                         | Marked as Done
----------------------------|----------|--------|-------------------------------------------------------------------------------------------------|---------------
/api/cart/menu-items        | Customer | GET    | Returns current items in the cart for the current user token                                    | DONE
/api/cart/menu-items        | Customer | POST   | Adds the menu item to the cart. Sets the authenticated user as the user id for these cart items | DONE
/api/cart/menu-items        | Customer | DELETE | Deletes all menu items created by the current user token                                        | DONE

Order Management Endpoints:

Endpoint                    | Role           | Method     | Purpose                                                                                                                                               | Marked as Done
----------------------------|----------------|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|---------------
/api/orders                 | Customer       | GET        | Returns all orders with order items created by this user                                                                                              | DONE
/api/orders                 | Customer       | POST       | Creates a new order item for the current user. Gets current cart items from the cart endpoints and adds those items to the order items table.         | DONE
                            |                |            | Then deletes all items from the cart for this user.                                                                                                   | 
/api/orders/{orderId}       | Customer       | GET        | Returns all items for this order id. If the order ID doesn’t belong to the current user, it displays an appropriate HTTP error status code            | 
/api/orders                 | Manager        | GET        | Returns all orders with order items by all users                                                                                                      | DONE
/api/orders/{orderId}       | Customer       | PUT, PATCH | Updates the order. A manager can use this endpoint to set a delivery crew to this order, and also update the order status to 0 or 1.                  |
                            |                |            | If a delivery crew is assigned to this order and the status = 0, it means the order is out for delivery.                                              |
                            |                |            | If a delivery crew is assigned to this order and the status = 1, it means the order has been delivered.                                               | 
/api/orders/{orderId}       | Manager        | DELETE     | Deletes this order                                                                                                                                    | 
/api/orders                 | Delivery crew  | GET        | Returns all orders with order items assigned to the delivery crew.                                                                                    | 
/api/orders/{orderId}       | Delivery crew  | PATCH      | A delivery crew can use this endpoint to update the order status to 0 or 1. The delivery crew will not be able to update anything else in this order. | 

OTHER:

Implement proper filtering, pagination and sorting capabilities for /api/menu-items and /api/orders endpoints.

Finally, apply some throttling for the authenticated users and anonymous or unauthenticated users. -> DONE

Add minimum value validators to the serializers. If it's below 0, just set it to zero. Don't do the whole ADFHGJIAFJOADFIiASDF shit drf does when there's a 500 error.